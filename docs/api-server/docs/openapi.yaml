openapi: 3.0.3
info:
  title: 'Fitness AI'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://127.0.0.1:8000'
paths:
  /api/login:
    post:
      summary: 'Log in a user and issue an authentication token.'
      operationId: logInAUserAndIssueAnAuthenticationToken
      description: 'Validates user credentials and issues a new API token. If two-factor authentication is enabled, a valid code is required.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Login successful.'
                  data:
                    user:
                      id: 1
                      name: 'John Doe'
                      email: user@example.com
                      email_verified_at: '2024-12-02T12:00:00.000000Z'
                    token: example-token
                properties:
                  message:
                    type: string
                    example: 'Login successful.'
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'John Doe'
                          email:
                            type: string
                            example: user@example.com
                          email_verified_at:
                            type: string
                            example: '2024-12-02T12:00:00.000000Z'
                      token:
                        type: string
                        example: example-token
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid credentials.'
                properties:
                  message:
                    type: string
                    example: 'Invalid credentials.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid two-factor authentication code.'
                  errors:
                    two_factor_code:
                      - 'The two_factor_code field is required.'
                properties:
                  message:
                    type: string
                    example: 'Invalid two-factor authentication code.'
                  errors:
                    type: object
                    properties:
                      two_factor_code:
                        type: array
                        example:
                          - 'The two_factor_code field is required.'
                        items:
                          type: string
        429:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Too many login attempts. Please try again in {retry_after} seconds.'
                  retry_after: 60
                properties:
                  message:
                    type: string
                    example: 'Too many login attempts. Please try again in {retry_after} seconds.'
                  retry_after:
                    type: integer
                    example: 60
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The user''s email address.'
                  example: user@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The user''s password.'
                  example: ')B#Qz?{T8"<Tx'
                  nullable: false
                two_factor_code:
                  type: string
                  description: 'The two-factor authentication code if enabled.'
                  example: voluptatum
                  nullable: false
              required:
                - email
                - password
      security: []
  /api/logout:
    post:
      summary: 'Log out the authenticated user.'
      operationId: logOutTheAuthenticatedUser
      description: 'Revokes the current access token, effectively logging out the user.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Logout successful.'
                properties:
                  message:
                    type: string
                    example: 'Logout successful.'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Authentication
  /api/refresh-token:
    post:
      summary: 'Refresh the user''s authentication token.'
      operationId: refreshTheUsersAuthenticationToken
      description: 'Revokes the current token and issues a new one.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Token refreshed successfully.'
                  data:
                    token: new-example-token
                properties:
                  message:
                    type: string
                    example: 'Token refreshed successfully.'
                  data:
                    type: object
                    properties:
                      token:
                        type: string
                        example: new-example-token
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Authentication
  /api/forgot-password:
    post:
      summary: 'Send a password reset link to the user''s email.'
      operationId: sendAPasswordResetLinkToTheUsersEmail
      description: "Initiates the password reset process by emailing a reset link to the user.\nA generic response is returned regardless of whether the email exists.\nAdditional rate limiting is applied to prevent abuse."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'If your email exists in our system, a password reset link has been sent.'
                properties:
                  message:
                    type: string
                    example: 'If your email exists in our system, a password reset link has been sent.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Unable to send password reset link.'
                  errors:
                    email:
                      - 'The email field is required.'
                      - 'The email must be a valid email address.'
                properties:
                  message:
                    type: string
                    example: 'Unable to send password reset link.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email field is required.'
                          - 'The email must be a valid email address.'
                        items:
                          type: string
        429:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after: 60
                properties:
                  message:
                    type: string
                    example: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after:
                    type: integer
                    example: 60
      tags:
        - 'Password Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The user''s email address.'
                  example: user@example.com
                  nullable: false
              required:
                - email
      security: []
  /api/reset-password:
    post:
      summary: 'Reset the user''s password using the provided token.'
      operationId: resetTheUsersPasswordUsingTheProvidedToken
      description: 'Validates the token and updates the user''s password. Rate limiting is applied to prevent abuse.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password reset successful.'
                properties:
                  message:
                    type: string
                    example: 'Password reset successful.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid token or email.'
                properties:
                  message:
                    type: string
                    example: 'Invalid token or email.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Unable to reset password.'
                  errors:
                    email:
                      - 'The email field is required.'
                      - 'The email must be a valid email address.'
                    password:
                      - 'The password must be at least 8 characters.'
                properties:
                  message:
                    type: string
                    example: 'Unable to reset password.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email field is required.'
                          - 'The email must be a valid email address.'
                        items:
                          type: string
                      password:
                        type: array
                        example:
                          - 'The password must be at least 8 characters.'
                        items:
                          type: string
        429:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after: 60
                properties:
                  message:
                    type: string
                    example: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after:
                    type: integer
                    example: 60
      tags:
        - 'Password Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The password reset token.'
                  example: voluptatum
                  nullable: false
                email:
                  type: string
                  description: 'The user''s email address.'
                  example: user@example.com
                  nullable: false
                password:
                  type: string
                  description: 'The new password.'
                  example: ')B#Qz?{T8"<Tx'
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Confirmation of the new password.'
                  example: voluptatum
                  nullable: false
              required:
                - token
                - email
                - password
                - password_confirmation
      security: []
  /api/password/update:
    post:
      summary: 'Update the authenticated user''s password.'
      operationId: updateTheAuthenticatedUsersPassword
      description: 'Validates the current password and updates it to the new password.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password updated successfully.'
                properties:
                  message:
                    type: string
                    example: 'Password updated successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Current password does not match.'
                properties:
                  message:
                    type: string
                    example: 'Current password does not match.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Validation failed.'
                  errors:
                    password:
                      - 'The password must be at least 8 characters.'
                properties:
                  message:
                    type: string
                    example: 'Validation failed.'
                  errors:
                    type: object
                    properties:
                      password:
                        type: array
                        example:
                          - 'The password must be at least 8 characters.'
                        items:
                          type: string
      tags:
        - 'Password Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  description: 'The user''s current password.'
                  example: voluptatum
                  nullable: false
                password:
                  type: string
                  description: 'The new password.'
                  example: ')B#Qz?{T8"<Tx'
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Confirmation of the new password.'
                  example: voluptatum
                  nullable: false
              required:
                - current_password
                - password
                - password_confirmation
  /api/register/initiate:
    post:
      summary: 'Initiate the registration process by accepting the user''s email.'
      operationId: initiateTheRegistrationProcessByAcceptingTheUsersEmail
      description: "Generates a registration token and sends a verification email containing the token.\nThe token is valid for 1 hour."
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration initiated successfully.'
                properties:
                  message:
                    type: string
                    example: 'Registration initiated successfully.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration initiation failed.'
                  errors:
                    email:
                      - 'The email has already been taken.'
                properties:
                  message:
                    type: string
                    example: 'Registration initiation failed.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email has already been taken.'
                        items:
                          type: string
        429:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after: 60
                properties:
                  message:
                    type: string
                    example: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after:
                    type: integer
                    example: 60
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The user''s email address.'
                  example: user@example.com
                  nullable: false
              required:
                - email
      security: []
  /api/register/resend:
    post:
      summary: 'Resend the verification email containing the registration token.'
      operationId: resendTheVerificationEmailContainingTheRegistrationToken
      description: 'Allows users to resend the verification email. Rate limiting is applied to prevent abuse.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Verification email resent successfully.'
                properties:
                  message:
                    type: string
                    example: 'Verification email resent successfully.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Resend failed.'
                  errors:
                    email:
                      - 'The email field is required.'
                properties:
                  message:
                    type: string
                    example: 'Resend failed.'
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        example:
                          - 'The email field is required.'
                        items:
                          type: string
        429:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after: 60
                properties:
                  message:
                    type: string
                    example: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after:
                    type: integer
                    example: 60
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: 'The user''s email address.'
                  example: user@example.com
                  nullable: false
              required:
                - email
      security: []
  /api/register/validate-token:
    post:
      summary: 'Validate the registration token and return its status.'
      operationId: validateTheRegistrationTokenAndReturnItsStatus
      description: 'Checks if the provided token is valid or has expired, and returns the remaining time until expiration.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Token is valid.'
                  data:
                    status: valid
                    expires_in: 3600
                properties:
                  message:
                    type: string
                    example: 'Token is valid.'
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: valid
                      expires_in:
                        type: integer
                        example: 3600
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Token is invalid or has expired.'
                  data:
                    status: invalid
                properties:
                  message:
                    type: string
                    example: 'Token is invalid or has expired.'
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: invalid
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Validation failed.'
                  errors:
                    token:
                      - 'The token field is required.'
                properties:
                  message:
                    type: string
                    example: 'Validation failed.'
                  errors:
                    type: object
                    properties:
                      token:
                        type: array
                        example:
                          - 'The token field is required.'
                        items:
                          type: string
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The registration token to validate.'
                  example: voluptatum
                  nullable: false
              required:
                - token
      security: []
  /api/register:
    post:
      summary: 'Complete the registration by creating a new user account.'
      operationId: completeTheRegistrationByCreatingANewUserAccount
      description: 'Validates the registration token and creates a new user with the provided name and password.'
      parameters: []
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration completed successfully.'
                  data:
                    user:
                      id: 1
                      name: 'John Doe'
                      email: user@example.com
                      email_verified_at: '2024-12-02T12:00:00.000000Z'
                    token: example-token
                properties:
                  message:
                    type: string
                    example: 'Registration completed successfully.'
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'John Doe'
                          email:
                            type: string
                            example: user@example.com
                          email_verified_at:
                            type: string
                            example: '2024-12-02T12:00:00.000000Z'
                      token:
                        type: string
                        example: example-token
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid or expired registration token.'
                properties:
                  message:
                    type: string
                    example: 'Invalid or expired registration token.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Registration failed.'
                  errors:
                    name:
                      - 'The name field is required.'
                properties:
                  message:
                    type: string
                    example: 'Registration failed.'
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        example:
                          - 'The name field is required.'
                        items:
                          type: string
        429:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after: 60
                properties:
                  message:
                    type: string
                    example: 'Too many attempts. Please try again in {retry_after} seconds.'
                  retry_after:
                    type: integer
                    example: 60
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  description: 'The registration token provided via email.'
                  example: voluptatum
                  nullable: false
                name:
                  type: string
                  description: 'The user''s full name.'
                  example: 'John Doe'
                  nullable: false
                password:
                  type: string
                  description: 'The user''s password.'
                  example: ')B#Qz?{T8"<Tx'
                  nullable: false
                password_confirmation:
                  type: string
                  description: 'Confirmation of the password.'
                  example: voluptatum
                  nullable: false
              required:
                - token
                - name
                - password
                - password_confirmation
      security: []
  /api/two-factor-authentication/enable:
    post:
      summary: 'Enable two-factor authentication for the user.'
      operationId: enableTwoFactorAuthenticationForTheUser
      description: 'Generates a secret key and recovery codes for two-factor authentication.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Two-factor authentication enabled.'
                  data:
                    qr_code_url: 'otpauth://totp/AppName:user@example.com?secret=ABCDEF...'
                    recovery_codes:
                      - code1
                      - code2
                      - ...
                      - code8
                properties:
                  message:
                    type: string
                    example: 'Two-factor authentication enabled.'
                  data:
                    type: object
                    properties:
                      qr_code_url:
                        type: string
                        example: 'otpauth://totp/AppName:user@example.com?secret=ABCDEF...'
                      recovery_codes:
                        type: array
                        example:
                          - code1
                          - code2
                          - ...
                          - code8
                        items:
                          type: string
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Two-factor authentication is already enabled.'
                properties:
                  message:
                    type: string
                    example: 'Two-factor authentication is already enabled.'
      tags:
        - 'Two-Factor Authentication'
  /api/two-factor-authentication/confirm:
    post:
      summary: 'Confirm two-factor authentication setup.'
      operationId: confirmTwoFactorAuthenticationSetup
      description: 'Validates the code from the authenticator app to confirm setup.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Two-factor authentication confirmed.'
                properties:
                  message:
                    type: string
                    example: 'Two-factor authentication confirmed.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Two-factor authentication is not enabled.'
                properties:
                  message:
                    type: string
                    example: 'Two-factor authentication is not enabled.'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid two-factor authentication code.'
                properties:
                  message:
                    type: string
                    example: 'Invalid two-factor authentication code.'
      tags:
        - 'Two-Factor Authentication'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: 'The verification code from the authenticator app.'
                  example: voluptatum
                  nullable: false
              required:
                - code
  /api/two-factor-authentication/disable:
    post:
      summary: 'Disable two-factor authentication for the user.'
      operationId: disableTwoFactorAuthenticationForTheUser
      description: 'Removes two-factor authentication settings from the user''s account.'
      parameters: []
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Two-factor authentication disabled.'
                properties:
                  message:
                    type: string
                    example: 'Two-factor authentication disabled.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Two-factor authentication is not enabled.'
                properties:
                  message:
                    type: string
                    example: 'Two-factor authentication is not enabled.'
      tags:
        - 'Two-Factor Authentication'
tags:
  -
    name: Authentication
    description: ''
  -
    name: 'Password Management'
    description: ''
  -
    name: Registration
    description: ''
  -
    name: 'Two-Factor Authentication'
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: 'Tokens are issued upon successful login via the <code>/api/login</code> endpoint.'
security:
  -
    default: []
